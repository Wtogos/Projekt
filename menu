#define ARDUINO_JSON_ENABLE_STD_STRING
#include "ArduinoJson-v6.21.2.h"
#include <iostream>
#include <conio.h> // getch()
#include <time.h> // losowanie
#include <windows.h> // sleep
#include <cstdlib> // cls
#include <stdio.h> // exit
#include <fstream> // pliki
#include <sstream> //stringstream
#include <vector> //wektory
#include <algorithm> //sortowanie

using namespace std;

int szerokosc = 30, wysokosc = 20, raz; const int gora = 72, dol = 80, lewo = 75, prawo = 77;
int wazY, wazX, jedzY, jedzX, dlugosc = 3, x[10000], y[10000], ruch = 0, klawisz; // dlugosc - dlugosc weza, x i y- historia ruchow weza max 10000 ,ruch-ile zostalo wykonanych ruchow
char pole[30][20]; // p-puste  w-waz j-jedzenie
char kierunek = 'p'; // prawo, lewo, gora, dol
int poziomTrudnosci;
int predkosc;

// Funkcja przechowująca dane
struct HighScore
{
    int score;
    string playerName;
};

void saveHighScore(const string& playerName, int score)
{
    ofstream file("highscores.json", ios::app);
    if (file.good())
    {
        StaticJsonDocument<256> doc;
        doc["PlayerName"] = playerName;
        doc["Score"] = score;

        serializeJson(doc, file);
        file << '\n';

        file.close();
    }
    else
    {
        cout << "Błąd podczas zapisu do pliku highscores.json\n";
    }
}

void showHighScores()
{
    ifstream file("highscores.json");
    if (file.good())
    {
        string line;
        while (getline(file, line))
        {
            StaticJsonDocument<256> doc;
            DeserializationError error = deserializeJson(doc, line);
            if (!error)
            {
                string playerName = doc["PlayerName"].as<string>();
                int score = doc["Score"].as<int>();
                cout << "Gracz: " << playerName << ", Wynik: " << score << '\n';
            }
            else
            {
                cout << "Błąd podczas odczytu danych z pliku highscores.json\n";
                break;
            }
        }

        file.close();
    }
    else
    {
        cout << "Błąd podczas otwierania pliku highscores.json\n";
    }
}

void showOptions(StaticJsonDocument<1024>& doc)
{
    //Wyprintowanie zawartości dokumentu
    for (JsonPair p : doc.as<JsonObject>())
    {
        cout << p.key() << " " << p.value() << '\n';
    }
}

void HighScoreMenu()
{
    ifstream file("highscores.json");
    if (file.good())
    {
        vector<HighScore> highScores; // Wektor przechowujący wyniki

        string line;
        while (getline(file, line))
        {
            StaticJsonDocument<256> doc;
            DeserializationError error = deserializeJson(doc, line);
            if (!error)
            {
                string playerName = doc["PlayerName"].as<string>();
                int score = doc["Score"].as<int>();
                highScores.push_back({ score, playerName }); // Dodanie wyniku do wektora
            }
            else
            {
                cout << "Błąd podczas odczytu danych z pliku highscores.json\n";
                break;
            }
        }

        // Sortowanie wyników od najwyższego do najmniejszego
        sort(highScores.begin(), highScores.end(), [](const HighScore& a, const HighScore& b) {
            return a.score > b.score;
        });

        // Wyświetlanie posortowanych wyników z numeracją
        int rank = 1;
        for (const HighScore& highScore : highScores)
        {
            cout << "Miejsce " << rank << ": Gracz: " << highScore.playerName << ", Wynik: " << highScore.score << '\n';
            rank++;
        }

        file.close();
    }
    else
    {
        cout << "Blad podczas otwierania pliku highscores.json\n";
    }

    cout<<endl;
    cout << "Nacisnij Enter, aby powrocic do menu...";
    cin.ignore(std::numeric_limits<streamsize>::max(), '\n'); // Oczekiwanie na wciśnięcie Enter
    cin.get();
}

bool GameOver()
{
    system ("CLS");
    cout << "Gra skonczona!" << endl;
    cout << "Twoj wynik: " << dlugosc << endl;

    string playerName;
    cout << "Wpisz swoje imie: ";
    cin >> playerName;

    saveHighScore(playerName, dlugosc);

    cout << endl;
    cout << "Czy chcesz wrocic do menu glownego? (T/N): ";
    char choice;
    cin >> choice;

    if (choice == 'T' || choice == 't') {
        return true;
    } else {
        return false;
    }
}

void Gra()
{
    bool returnToMenu = false;
    do
    {
        // Ustawienie tablicy z pustymi polami
        for (int i = 0; i < wysokosc; i++)
        {
            for (int j = 0; j < szerokosc; j++)
            {
                pole[j][i] = 'p';
            }
        }

        // Losowanie miejsca węża
        srand(time(NULL));
        wazX = rand() % szerokosc;
        wazY = rand() % wysokosc;
        pole[wazX][wazY] = 'w';

        // Losowanie położenia jedzenia
        do
        {
            jedzX = rand() % szerokosc;
            jedzY = rand() % wysokosc;
        } while (pole[jedzX][jedzY] != 'p');
        pole[jedzX][jedzY] = 'j';

        // Nieskończona pętla
        for (;;)
        {
            ruch++;
            x[ruch] = wazX; // Gdzie wąż się znajdował
            y[ruch] = wazY;
            pole[x[ruch - dlugosc]][y[ruch - dlugosc]] = 'p'; // Kasowanie ogona

            system("CLS"); // Usuwa poprzednie co było na stronie

            // Rysowanie tabeli, jedzenia i węża
            for (int i = 0; i <= szerokosc; i++)
            {
                cout << "-";
            }
            for (int i = 0; i < wysokosc; i++)
            {
                cout << endl
                     << "|";
                for (int j = 0; j < szerokosc; j++)
                {
                    if (pole[j][i] == 'p')
                    {
                        cout << " ";
                    }
                    if (pole[j][i] == 'w')
                    {
                        cout << "O";
                    }
                    if (pole[j][i] == 'j')
                    {
                        cout << "*";
                    }
                }
                cout << "|";
            }
            cout << endl;
            for (int i = 0; i <= szerokosc; i++)
            {
                cout << "-";
            }
            cout << endl
                 << endl
                 << "Wynik: " << dlugosc;

            Sleep(predkosc); // Ile milisekund ma czekać program

            if (_kbhit()) // Odczyt klawisza
            {
                klawisz = _getch();
                if (klawisz == gora && kierunek != 'd')
                {
                    kierunek = 'g';
                }
                if (klawisz == dol && kierunek != 'g')
                {
                    kierunek = 'd';
                }
                if (klawisz == lewo && kierunek != 'p')
                {
                    kierunek = 'l';
                }
                if (klawisz == prawo && kierunek != 'l')
                {
                    kierunek = 'p';
                }
            }

            if (kierunek == 'g')
            {
                wazY--;
            }
            if (kierunek == 'd')
            {
                wazY++;
            }
            if (kierunek == 'l')
            {
                wazX--;
            }
            if (kierunek == 'p')
            {
                wazX++;
            }

            // Uderzenie w siebie
            if (pole[wazX][wazY] == 'w')
            {
                break;
            }

            if (dlugosc == 600) // Opcja wygrania; nie wiem czy działa, bo nie grałem(a) tak długo
            {
                cout << endl << "Wygrałeś/łaś!" << endl;
                cout << "Wynik: 600!" << endl;
            }

            // Zjedzenie jedzenia
            if (pole[wazX][wazY] == 'j')
            {
                dlugosc++;
                do
                {
                    jedzX = rand() % szerokosc;
                    jedzY = rand() % wysokosc;
                } while (pole[jedzX][jedzY] != 'p');
                pole[jedzX][jedzY] = 'j';
            }

            // Przechodzenie przez ściany
            if (wazX == szerokosc) break;
            if (wazX == -1) break;
            if (wazY == wysokosc) break;
            if (wazY == -1) break;

            pole[wazX][wazY] = 'w';
        }

        returnToMenu = GameOver();

    } while (!returnToMenu);
}

void WybierzPoziomTrudnosci()
{
    cout << "Wybierz poziom trudnosci:" << endl;
    cout << "1. Latwy" << endl;
    cout << "2. Sredni" << endl;
    cout << "3. Trudny" << endl;
    cout << "Wybierz opcje: ";
    cin >> poziomTrudnosci;
    switch (poziomTrudnosci)
    {
    case 1:
        predkosc = 200; // Ustawienie prędkości dla łatwego poziomu trudności
        break;
    case 2:
        predkosc = 100; // Ustawienie prędkości dla średniego poziomu trudności
        break;
    case 3:
        predkosc = 50; // Ustawienie prędkości dla trudnego poziomu trudności
        break;
    default:
        cout << "Niepoprawny wybor! Ustawiam domyslny poziom trudnosci na latwy." << endl;
        predkosc = 200; // Ustawienie domyślnej prędkości dla łatwego poziomu trudności
        break;
    }
}

int main()
{
    int wybor;
    bool wyjscie = false;
    do
    {
        system("CLS");
        cout << "Menu Glowne" << endl;
        cout << "-----------------" << endl;
        cout << "1. Nowa gra" << endl;
        cout << "2. Opcje" << endl;
        cout << "3. Autor" << endl;
        cout << "4. High score" << endl;
        cout << "5. Wyjscie" << endl;
        cout << "-----------------" << endl;
        cout << "Wybierz opcje: ";
        cin >> wybor;
        switch (wybor)
        {
        case 1:
            predkosc = 200;
            Gra();
            break;
        case 2:
            system("CLS");
            cout << "Opcje" << endl;
            cout << "-----------------" << endl;
            cout << "1. Zmien predkosc" << endl;
            cout << "2. Powrot do menu glownego" << endl;
            cout << "-----------------" << endl;
            cout << "Wybierz opcje: ";
            cin >> wybor;
            switch (wybor)
            {
            case 1:
                WybierzPoziomTrudnosci();
                Gra();
                break;
            case 2:
                break;
            }
            break;

        case 3:
            system("CLS");
            cout << "Malgorzata Wtorkiewicz" << endl;
            cout << "Powrot do menu, nacisnij dowolny klawisz...";
            _getch(); // Oczekiwanie na dowolny klawisz
            break;
        case 4:
            system("CLS");
            HighScoreMenu();
            break;
        case 5:
            wyjscie = true;
            break;
        default:
            cout << "Niepoprawny wybor!" << endl;
            break;
        }
    } while (!wyjscie);

    return 0;
}

